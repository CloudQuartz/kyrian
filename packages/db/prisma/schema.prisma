// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  student       Student?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model DegreeProgram {
  code   String @id
  name   String
  degree String

  state String
  city  String

  credits  Int
  duration Int
  modality String

  isActive Boolean @default(true)

  phone String?
  email String

  creationStandard     String?
  creationStandardDate DateTime?
  cost                 Decimal?
  studentQuota         Int?
  knowledgeArea        String?

  history             String?                   @db.Text
  mission             String?                   @db.Text
  vision              String?                   @db.Text
  objectives          DegreeProgramObjectives[]
  profiles            DegreeProgramProfiles[]
  curricularStructure String?                   @db.Text
  syllabus            String?                   @db.Text
  monographs          Monograph[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("degree_programs")
}

model DegreeProgramObjectives {
  id              String @id @default(cuid())
  degreeProgramId String
  description     String

  degreeProgram DegreeProgram @relation(fields: [degreeProgramId], references: [code], onDelete: Cascade)

  @@index([degreeProgramId])
  @@map("degree_program_objectives")
}

model DegreeProgramProfiles {
  id              String @id @default(cuid())
  degreeProgramId String
  title           String
  description     String

  degreeProgram DegreeProgram @relation(fields: [degreeProgramId], references: [code], onDelete: Cascade)

  @@index([degreeProgramId])
  @@map("degree_program_profiles")
}

model Student {
  id        String   @id @default(cuid())
  idType    String
  name      String
  email     String   @unique
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  monographs Monograph[]

  @@index([userId])
}

model Monograph {
  id              String   @id @default(cuid())
  title           String
  publicationDate DateTime
  authorId        String?
  degreeProgramId String?
  createdAt       DateTime @default(now())

  author        Student?       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  degreeProgram DegreeProgram? @relation(fields: [degreeProgramId], references: [code], onDelete: Cascade)

  @@index([authorId])
  @@index([degreeProgramId])
  @@index([title])
}
